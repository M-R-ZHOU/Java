********************************************
面向对象的数组
import java.util.Arrays;

public class MyList{
	private int[] list;
	public MyList() {
		list = new int[0];
	}


	public void getSize() {
		System.out.println("该列表目前的长度为" + list.length);
	}
	public void add(int element) {
		int[] tempList = new int[list.length + 1];
		for (int i = 0; i<list.length; i++) {
			tempList[i] = list[i];
		}
		tempList[list.length] = element;
		list = tempList;
	}

	public void del(int index) {
		int[] tempList = new int[list.length-1];
		if (index<0 || index>list.length-1) {
			throw new RuntimeException("下标越界");
		}
		else {
			for (int i = 0; i < tempList.length; i++) {
				if (i<index) {
					tempList[i] = list[i];
				}
				else {
					tempList[i] = list[i+1];
				}
			}

		}

		list = tempList;
	}

	public void printList() {
		System.out.println(Arrays.toString(list));
	}

	public void get(int index) {
		System.out.println("索引" + index + "处的元素是" + list[index]);
	}

	public  void insert(int index, int element) {
		int [] tempList = new int[list.length+1];
		for(int i=0;i<list.length;i++) {
			if(i<index) {
				tempList[i] = list[i];
			}
			else {
				tempList[i+1] = list[i];
			}
		}
		tempList[index] = element;
		list = tempList;
	}

	public int binarySearch(int target) {
		int start = 0;
		int end = list.length-1;
		while (start <= end) {
			int mid = (start + end)/2;
			if(list[mid] == target) {
				return mid;
			}
			else if (list[mid] < target) {
				start = mid +1;
			}
			else {
				end = mid -1;
			}

		}
		return -1;

	}
}

package cn.china.packages.pck8;


public class TestMyList {

	public static void main(String[] args) {
		MyList list = new MyList();
		list.add(1);
		list.add(4);
		list.add(7);
		list.add(9);
		list.add(13);
		list.add(14);
		list.add(16);
		/*
		list.add(80);
		list.add(90);
		list.add(100);
		list.add(110);
		list.add(120);
		list.getSize();
		list.printList();
		list.del(0);
		list.del(10);
		list.printList();
		list.get(2);
		list.printList();
		list.insert(2, 521);
		list.printList();
		*/
		int index = list.binarySearch(7);
		list.printList();
		System.out.println(index);
	}

}
*********************************************************************
MyStack
package cn.china.packages.pck8;

import java.util.Arrays;

public class MyStack {
	private int[] stack;
	public MyStack() {
		stack = new int[0];
	}

	public void push(int element) {
		int[] tempStack = new int[stack.length + 1];
		for(int i=0;i<stack.length;i++) {
			tempStack[i] = stack[i];
		}
		tempStack[stack.length] = element;
		stack = tempStack;
	}

	public int pop() {
		if(stack.length <=0) {
			throw new RuntimeException("the Stack is empty");
		}
		int item = stack[stack.length-1];
		int[] tempStack = new int[stack.length - 1];
		for(int i=0;i<tempStack.length;i++) {
			tempStack[i] = stack[i];
		}
		stack = tempStack;
		return item;
	}
	public int peek() {
		return stack[stack.length - 1];
	}
	public void printStack() {
		System.out.println(Arrays.toString(stack));
	}

	public boolean isEmpty() {
		return stack.length == 0;
	}

}


package cn.china.packages.pck8;

public class TestMyStack {
	public static void main(String[] args) {
		MyStack stack = new MyStack();
		stack.push(1);
		stack.push(3);
		stack.push(5);
		stack.printStack();
		System.out.println(stack.peek());
		stack.pop();
		stack.printStack();
		System.out.println(stack.peek());
		System.out.println(stack.isEmpty());

	}
}
*********************************************************************************************************
单向链表的java实现
package cn.china.packages.pck8;

public class MyLinkedList {
	Node node;
	//头结点
	public MyLinkedList(int data) {
		// TODO Auto-generated constructor stub
		node = new Node(data);
	}
	static class Node{
		int data;
		Node nextNode;
		Node(){

		}
		Node(int data){
			this.data = data;

		}
	}
	public MyLinkedList add(int data) {
		Node newNode = new Node(data);
		Node curreNode = node;
		while (curreNode.nextNode != null) {
			curreNode = curreNode.nextNode;
		}
		curreNode.nextNode = newNode;
		return this;

	}
	public int getLength() {
		int i = 1;
		Node currentNode  = node;
		while(currentNode.nextNode != null) {
			currentNode = currentNode.nextNode;
			i++;
		}
		return i ;
	}

	public void printLinkedList() {
		Node currentNode = node;
		while(currentNode.nextNode != null) {
			System.out.print(currentNode.data + ",");
			currentNode = currentNode.nextNode;
		}
		System.out.print(currentNode.data);
		System.out.println();
	}

	public void remove(int index) {
		Node currNode = node;
		int k = 0;
		if(index ==0) {
			node = node.nextNode;
		}
		else if(index>0 && index<this.getLength()-1){
			while (k<index-1) {
				currNode = currNode.nextNode;
				k++;
			}
			currNode.nextNode = currNode.nextNode.nextNode;
		}
		else {
			System.out.println("索引越界");
		}
	}

	public void insert(int data,int index) {
		Node newNode = new Node(data);
		Node preNode = node;
		Node nextPreNode;
		int k=0;
		while (k<index - 1) {
			preNode = preNode.nextNode;
			k++;
		}
		nextPreNode = preNode.nextNode;
		preNode.nextNode = newNode;
		newNode.nextNode = nextPreNode;
	}
}

public class TestMyLinkedList {
	public static void main(String[] args) {
		MyLinkedList linkedList = new MyLinkedList(0);
		linkedList.add(10).add(20).add(30).add(40);
		linkedList.add(50).add(60).add(70);
		System.out.println(linkedList.getLength());
		linkedList.insert(10000, 6);
		linkedList.printLinkedList();
		linkedList.remove(0);
		linkedList.printLinkedList();
		linkedList.remove(4);
		linkedList.printLinkedList();
	}
}